package app;

import java.text.*;
import java.util.*;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;  
import org.springframework.ui.ModelMap;  
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;  
import org.springframework.web.bind.annotation.RequestMethod;  
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;

import ddq.Service.*;
import ddq.model.*;
import ddq.model.JsonClass.Person;

@Controller  
@RequestMapping("/json")
public class JsonController {

	@Autowired
	private HttpServletRequest req;

	@Autowired
	private StockService stockService;

	@Autowired
	private AppCache appCache;

	SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
	Random ran=new Random();
	DecimalFormat df= new DecimalFormat("#0.00");   
	Gson gg=new Gson();
	Map mapr=new HashMap();

	public JsonController()
	{
		mapr.put("sh600798", 16.69);
		mapr.put("sh601866", 11.35);
		mapr.put("sh600379", 18.45);
		mapr.put("sh601216", 28.33);
		mapr.put("sh600448", 6.38);
		mapr.put("sh600399", 19.92);
		mapr.put("sh600844", 4.72);
		mapr.put("sh603085", 49.58);
		mapr.put("sh600252", 24.77);
		mapr.put("sh603018", 77.39);
		mapr.put("00005", 72.45);
		mapr.put("00011", 163.4);
		mapr.put("00222", 18.67);
		mapr.put("00302", 108.8);
		mapr.put("GLBL", 21.79);
		mapr.put("NK", 32.64);
		mapr.put("CYRXW", 2.05);
		mapr.put("WYIGU", 13.1);
	}

	@RequestMapping(value="/getTotalAssetsInfo.json",method = RequestMethod.GET)  
	public @ResponseBody String getTotalAssetsInfo() throws Exception { 

		String day=req.getParameter("day");
		day=day==null||day==""?"7":day;

		JsonClass temp=new JsonClass();
		Calendar cal=Calendar.getInstance();
		for(int i=0;i<Integer.parseInt(day);i++)
		{
			cal.setTime(new Date());
			cal.add(Calendar.DATE, -i);
			JsonData date=new JsonData();
			date.setTime(sdf.format(cal.getTime()));
			date.setDay(ran.nextInt()+"");
			date.setDayPercent(df.format(ran.nextDouble())+"");
			date.setDayStatus(Integer.parseInt(date.getDay())<0?"down":"up");
			date.setTotal(ran.nextInt()+"");
			date.setTotalStatus(Integer.parseInt(date.getTotal())<0?"down":"up");
			date.setTotalPercent(df.format(ran.nextDouble())+"");
			temp.getTotalAssets().getModel().getData().add(date);
		}
		temp.getTotalAssets().setResult("success");
		temp.getTotalAssets().getModel().setTotal(ran.nextInt()+"");


		Map map=appCache.getStockInfo(9802,Integer.parseInt(day));
		Map map1=appCache.getCurrency();

		if((Integer)map.get("day")!=Integer.parseInt(day))
		{
			map=appCache.updateStockInfo(9802,Integer.parseInt(day));
		}

		JsonClass temp1=new JsonClass();
		List<Map> datelist=(List<Map>)map.get("date");
		List<Map> stocklist=(List<Map>)map.get("stock");

		for(int i=0;i<datelist.size();i++)
		{
			Map datemap=datelist.get(i);
			if(!datemap.get("time").toString().equals(sdf.format(new Date())))
			{
				JsonData date=new JsonData();

				date.setTime(datemap.get("time").toString());
				date.setDay(datemap.get("day")+"");
				date.setDayPercent((Double)datemap.get("dayPercent")*100+"");
				date.setDayStatus((Double)datemap.get("day")<0?"down":"up");
				date.setTotal(datemap.get("total").toString());
				date.setTotalStatus((Double)datemap.get("totalPercent")<0?"down":"up");
				date.setTotalPercent((Double)datemap.get("totalPercent")*100+"");
				date.setTotalall((Double)datemap.get("totalstock")+(Double)datemap.get("totalcash")+"");
				temp1.getTotalAssets().getModel().getData().add(date);
			}
		}

		Double dayprofit=0.0;
		Double daycash=0.0;
		Double totalprofit=0.0;		
		Double totalcash=0.0;
		Double sumcash=0.0;

		//计算总金额 今日盈亏及总盈亏
		for(int i=0;i<stocklist.size();i++)
		{

			Map stockMap=stocklist.get(i);
			Integer position=(Integer)stockMap.get("position");
			Integer jbuynum=(Integer)stockMap.get("jbuynum");
			Integer jsellnum=(Integer)stockMap.get("jsellnum");
			Double ytdprice=(Double)stockMap.get("ytdprice");
			Double jbuycash=(Double)stockMap.get("jbuycash");
			Double jsellcash=(Double)stockMap.get("jsellcash");
			Double buycash=(Double)stockMap.get("buycash");
			Double sellcash=(Double)stockMap.get("sellcash");
			Double qqjg=(Double)mapr.get(stockMap.get("id"));
			Integer zrccs=position-jbuynum+jsellnum;

			Double exchange=(Double)map1.get(stockMap.get("market"));
			exchange=exchange==null?1:exchange;

			dayprofit=(dayprofit+(zrccs-jsellnum)*(qqjg-ytdprice)+
					jbuynum*qqjg-jsellnum*ytdprice-jbuycash+jsellcash)*exchange;
			daycash=(daycash+buycash)*exchange;
			totalprofit=(totalprofit+position*qqjg-buycash+sellcash)*exchange;
			totalcash=(totalcash+jbuycash)*exchange;
			sumcash=(sumcash+position*qqjg)*exchange;
		}
		JsonData date=new JsonData();
		date.setTime(sdf.format(new Date()));
		date.setDay(dayprofit+"");
		date.setDayPercent(dayprofit/daycash*100+"");
		date.setDayStatus(dayprofit<0?"down":"up");
		date.setTotal(totalprofit.toString());
		date.setTotalStatus(totalprofit<0?"down":"up");
		date.setTotalPercent(totalprofit/totalcash*100+"");
		date.setTotalall((sumcash+(Double)map.get("cash"))+"");
		temp1.getTotalAssets().getModel().getData().add(date);
		temp1.getTotalAssets().getModel().setTotal((sumcash+(Double)map.get("cash"))+"");


		String callback=req.getParameter("callback");
		String result="";
		if(callback==null||callback=="")
		{
			result= gg.toJson(temp1.getTotalAssets());
		}
		else
		{
			result=callback+"("+gg.toJson(temp1.getTotalAssets())+")";
		}

		return result;  
	}

	@RequestMapping(value="/getMarketInfo.json",method = RequestMethod.GET)  
	public @ResponseBody String getMarketInfo() throws Exception { 

		Map map=appCache.getStockInfo(9802,0);
		JsonClass temp=new JsonClass();

		JsonClass.Market  temp1=temp.new Market();
		temp1.setName("A股");
		GetMarkData((List<Map>)map.get("stock"),1,mapr,temp1);
		temp.getMarkets().getModel().add(temp1);

		temp1=temp.new Market();
		temp1.setName("港股");
		GetMarkData((List<Map>)map.get("stock"),2,mapr,temp1);
		temp.getMarkets().getModel().add(temp1);

		temp1=temp.new Market();
		temp1.setName("美股");
		GetMarkData((List<Map>)map.get("stock"),3,mapr,temp1);
		temp.getMarkets().getModel().add(temp1);

		String callback=req.getParameter("callback");

		String result="";
		if(callback==null||callback=="")
		{
			result= gg.toJson(temp.getMarkets());
		}
		else
		{
			result=callback+"("+gg.toJson(temp.getMarkets())+")";
		}


		return result;  
	}

	private void GetMarkData(List<Map> list,Integer markid,Map mapr,JsonClass.Market temp1) throws Exception 
	{

		Double dayprofit=0.0;
		Double daycash=0.0;
		Double totalprofit=0.0;		
		Double totalcash=0.0; 

		Map map1=appCache.getCurrency();
		Double exchange=(Double)map1.get(1);
		exchange=exchange==null?1:exchange;

		//计算总金额 今日盈亏及总盈亏
		for(int i=0;i<list.size();i++)
		{
			Map stockMap=list.get(i);

			Integer position=(Integer)stockMap.get("position");
			Integer jbuynum=(Integer)stockMap.get("jbuynum");
			Integer jsellnum=(Integer)stockMap.get("jsellnum");
			Double ytdprice=(Double)stockMap.get("ytdprice");
			Double jbuycash=(Double)stockMap.get("jbuycash");
			Double jsellcash=(Double)stockMap.get("jsellcash");
			Double buycash=(Double)stockMap.get("buycash");
			Double sellcash=(Double)stockMap.get("sellcash");
			Double qqjg=(Double)mapr.get(stockMap.get("id"));
			Integer zrccs=position-jbuynum+jsellnum;

			if((Integer)stockMap.get("market")==markid)
			{
				dayprofit=dayprofit+(zrccs-jsellnum)*(qqjg-ytdprice)+
						jbuynum*qqjg-jsellnum*ytdprice-jbuycash+jsellcash;
				daycash=daycash+buycash;
				totalprofit=totalprofit+position*qqjg-buycash+sellcash;
				totalcash=totalcash+jbuycash;
			}

		}
		JsonData date=new JsonData();
		date.setCurrency("RMB");
		date.setTotalMarket(totalcash*exchange+"");
		date.setDay(dayprofit*exchange+"");
		date.setDayPercent(daycash==0?"0":dayprofit/daycash*100+"");
		date.setDayStatus(dayprofit<0?"down":"up");
		date.setTotal(totalprofit*exchange+"");
		date.setTotalStatus(totalprofit<0?"down":"up");
		date.setTotalPercent(totalcash==0?"0":dayprofit/daycash*100+"");
		temp1.getData().setRmb(date);

		date=new JsonData();
		date.setCurrency("original");
		date.setTotalMarket(totalcash+"");
		date.setDay(dayprofit+"");
		date.setDayPercent(daycash==0?"0":dayprofit/daycash*100+"");
		date.setDayStatus(dayprofit<0?"down":"up");
		date.setTotal(totalprofit+"");
		date.setTotalStatus(totalprofit<0?"down":"up");
		date.setTotalPercent(totalcash==0?"0":dayprofit/daycash*100+"");
		temp1.getData().setOriginal(date);
	}

	@RequestMapping(value="/getPersonInfo.json",method = RequestMethod.GET)  
	public @ResponseBody String getPersonInfo() throws Exception { 

		Map map=appCache.getStockInfo(9802,0);
		Map stockmap=appCache.getStock();
		Map map1=appCache.getCurrency();

		JsonClass temp=new JsonClass();
		//List<Stock> list=new ArrayList<Stock>();
		List<Map> list=(List<Map>)map.get("stock");

		for(int i=0;i<list.size();i++)
		{
			JsonClass.Person  temp1=temp.new Person();
			Map stockMap=list.get(i);

			Integer position=(Integer)stockMap.get("position");
			Integer jbuynum=(Integer)stockMap.get("jbuynum");
			Integer jsellnum=(Integer)stockMap.get("jsellnum");
			Double ytdprice=(Double)stockMap.get("ytdprice");
			Double jbuycash=(Double)stockMap.get("jbuycash");
			Double jsellcash=(Double)stockMap.get("jsellcash");
			Double buycash=(Double)stockMap.get("buycash");
			Double sellcash=(Double)stockMap.get("sellcash");
			Double qqjg=(Double)mapr.get(stockMap.get("id"));
			Integer zrccs=position-jbuynum+jsellnum;
			Stock stock=(Stock)map1.get(stockMap.get("id"));
			stock=stock==null?new Stock():stock;

			Double exchange=(Double)map1.get(stockMap.get("market"));
			exchange=exchange==null?1:exchange;

			Double dayprofit=((zrccs-jsellnum)*(qqjg-ytdprice)+
					jbuynum*qqjg-jsellnum*ytdprice-jbuycash+jsellcash)*exchange;
			Double daycash=(buycash)*exchange;
			Double totalprofit=(position*qqjg-buycash+sellcash)*exchange;
			Double totalcash=(jbuycash)*exchange;

			temp1.setName(stock.getName());
			temp1.setType(stock.getMarketname());
			temp1.setCode(stock.getStockid());

			JsonData date=new JsonData();
			date.setCurrency("original");
			date.setTotalMarket(position*qqjg+"");
			date.setDay(dayprofit+"");
			date.setDayPercent(dayprofit/daycash*100+"");
			date.setDayStatus(dayprofit<0?"down":"up");
			date.setTotal(totalprofit+"");
			date.setUnit(ran.nextInt()+"");
			date.setUnitPercent(df.format(ran.nextDouble())+"");
			date.setUnitStatus(Integer.parseInt(date.getUnit())<0?"down":"up");
			date.setTotalStatus(totalprofit<0?"down":"up");
			date.setTotalPercent(totalprofit/totalcash*100+"");
			temp1.getData().setOriginal(date);

			date=new JsonData();
			date.setCurrency("rmb");
			date.setTotalMarket(position*qqjg*exchange+"");
			date.setDay(dayprofit*exchange+"");
			date.setDayPercent(dayprofit/daycash*100+"");
			date.setDayStatus(dayprofit<0?"down":"up");
			date.setTotal(totalprofit*exchange+"");
			date.setTotalStatus(totalprofit<0?"down":"up");
			date.setTotalPercent(totalprofit/totalcash+"");
			date.setUnit(qqjg+"");
			date.setUnitPercent(df.format(ran.nextDouble())+"");
			date.setUnitStatus(qqjg<0?"down":"up");
			temp1.getData().setRmb(date);
            
			temp.getPersons().getModel().add(temp1);

		}

		String callback=req.getParameter("callback");

		String result="";
		if(callback==null||callback=="")
		{
			result= gg.toJson(temp.getPersons());
		}
		else
		{
			result=callback+"("+gg.toJson(temp.getPersons())+")";
		}


		return result;  
	}

}
