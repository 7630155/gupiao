<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="  
        http://www.springframework.org/schema/beans       
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/cache  
        http://www.springframework.org/schema/cache/spring-cache.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd ">

	<context:component-scan base-package="app">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<mvc:annotation-driven />

	<mvc:interceptors>
		<!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
		<bean class="app.SpringMVCInterceptor" />
		<!-- <mvc:interceptor> <mvc:mapping path="/app/stock/*" /> 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 
			<bean class="com.host.app.web.interceptor.LoginInterceptor" /> </mvc:interceptor> -->
	</mvc:interceptors>

	<!-- 缓存配置(两种) -->
	<!-- 启用缓存注解功能(请将其配置在Spring主配置文件中) -->
	<cache:annotation-driven cache-manager="cacheManager" />
	<!-- Spring自己的基于java.util.concurrent.ConcurrentHashMap实现的缓存管理器(该功能是从Spring3.1开始提供的) -->
	<!-- <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager"> 
		<property name="caches"> <set> <bean name="myCache" class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"/> 
		</set> </property> </bean> -->
	<!-- 若只想使用Spring自身提供的缓存器,则注释掉下面的两个关于Ehcache配置的bean,并启用上面的SimpleCacheManager即可 -->
	<!-- Spring提供的基于的Ehcache实现的缓存管理器 -->
	<bean id="cacheManagerFactory"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml" />
		<property name="shared" value="true" />
	</bean>
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="cacheManagerFactory" />
	</bean>

	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />

	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

	<context:property-placeholder location="classpath:do.properties" />
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
	</bean>

	<!-- 配置SqlMapClient对象 -->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation" value="/WEB-INF/classes/SqlMapConfig.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>


	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" propagation="REQUIRED" />
			<tx:method name="find*" read-only="true" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" isolation="REPEATABLE_READ" />
			<tx:method name="update*" propagation="REQUIRED" isolation="REPEATABLE_READ" />
			<tx:method name="add*" propagation="REQUIRED" isolation="REPEATABLE_READ" />
			<tx:method name="delete*" propagation="REQUIRED" isolation="REPEATABLE_READ" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<bean id="baseTransactionProxy" abstract="true"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>

	<aop:config>
		<aop:pointcut id="baseServiceMethods"
			expression="execution(* com.archie.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="baseServiceMethods" />
	</aop:config>
	<aop:aspectj-autoproxy />



	<!-- 配置实例 -->
	<bean id="cashDao" class="ddq.Dao.CashDao">
		<property name="sqlMapClient" ref="sqlMapClient">
		</property>
	</bean>

	<bean id="debtDao" class="ddq.Dao.DebtDao">
		<property name="sqlMapClient" ref="sqlMapClient">
		</property>
	</bean>

	<bean id="calcDao" class="ddq.Dao.CalcDao">
		<property name="sqlMapClient" ref="sqlMapClient">
		</property>
	</bean>

	<bean id="stockDao" class="ddq.Dao.StockDao">
		<property name="sqlMapClient" ref="sqlMapClient">
		</property>
	</bean>

	<bean id="sysDao" class="ddq.Dao.SysDao">
		<property name="sqlMapClient" ref="sqlMapClient">
		</property>
	</bean>

	<bean id="cashService" class="ddq.Service.CashService">
		<property name="cashDao" ref="cashDao">
		</property>
	</bean>


	<bean id="debtService" class="ddq.Service.DebtService">
		<property name="debtDao" ref="debtDao">
		</property>
		<property name="calcDao" ref="calcDao">
		</property>
		<property name="cashService" ref="cashService">
		</property>
	</bean>

	<bean id="stockService" class="ddq.Service.StockService">
	</bean>

	<bean id="sysService" class="ddq.Service.SysService">
	</bean>
		
	<bean id="appCache" class="ddq.Service.AppCache">
	</bean>

	<bean id="cashManager" parent="baseTransactionProxy">
		<property name="target" ref="cashService">
		</property>
	</bean>

	<bean id="debtManager" parent="baseTransactionProxy">
		<property name="target" ref="debtService">
		</property>
	</bean>

	<bean id="stockManager" parent="baseTransactionProxy">
		<property name="target" ref="stockService">
		</property>
	</bean>
</beans> 